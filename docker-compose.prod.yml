version: "3.9"

services:
  frontend:
    image: node:18-alpine
    container_name: templator_frontend_prod
    working_dir: /app
    environment:
      - NODE_ENV=production
    env_file:
      - ./frontend/.env.production
    volumes:
      - ./frontend:/app
    command: sh -c "corepack enable pnpm && pnpm install --frozen-lockfile && pnpm build && pnpm start -p 3000"
    expose:
      - "3000"
    networks:
      - app-network
    restart: unless-stopped

  backend:
    image: python:3.11-slim
    container_name: templator_backend_prod
    working_dir: /app
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
    command: sh -c "pip install -r requirements.txt && uvicorn src.main:app --host 0.0.0.0 --port 8000"
    expose:
      - "8000"
    networks:
      - app-network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: templator_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    environment:
      - DOMAIN=${DOMAIN}
    volumes:
      - ./nginx/default.conf.template:/etc/nginx/templates/default.conf.template:ro
      - ./nginx/https.conf.template:/etc/nginx/templates/https.conf.template:ro
      - certbot-etc:/etc/letsencrypt
      - certbot-challenges:/var/www/certbot
    depends_on:
      - frontend
      - backend
    command: >-
      sh -c "apk add --no-cache gettext && 
      if [ -n \"$$DOMAIN\" ] && [ -f /etc/letsencrypt/live/$$DOMAIN/fullchain.pem ] && [ -f /etc/letsencrypt/live/$$DOMAIN/privkey.pem ]; then 
        tpl=/etc/nginx/templates/https.conf.template; 
      else 
        tpl=/etc/nginx/templates/default.conf.template; 
      fi; 
      envsubst '$$DOMAIN' < $$tpl > /etc/nginx/conf.d/default.conf && 
      nginx -g 'daemon off;'"
    networks:
      - app-network
    restart: unless-stopped

  certbot:
    image: certbot/certbot:latest
    container_name: templator_certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-challenges:/var/www/certbot
    networks:
      - app-network
    restart: unless-stopped
    entrypoint: >-
      sh -c "trap exit TERM; while :; do sleep 12h & wait $${!}; certbot renew --webroot -w /var/www/certbot --quiet; done"

networks:
  app-network:

volumes:
  certbot-etc:
  certbot-challenges: